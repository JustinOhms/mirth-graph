
<!doctype html>

<meta charset="utf-8">
<title>Mirth Graph</title>

<script src="http://d3js.org/d3.v3.js"></script>
<script src="http://cpettitt.github.io/project/graphlib-dot/v0.5.2/graphlib-dot.js"></script>
<script src="http://cpettitt.github.io/project/dagre-d3/latest/dagre-d3.js"></script>

<style>
svg {
  border: 1px solid #999;
  overflow: hidden;
}

.node {
  white-space: nowrap;
}

.node rect,
.node circle,
.node ellipse {
  stroke: #333;
  fill: #fff;
  stroke-width: 1.5px;
}

.cluster rect {
  stroke: #333;
  fill: #000;
  fill-opacity: 0.1;
  stroke-width: 1.5px;
}

.edgePath path.path {
  stroke: #333;
  stroke-width: 1.5px;
  fill: none;
}
</style>

<style>
h1, h2 {
  color: #333;
}

textarea {
  width: 800px;
}

label {
  margin-top: 1em;
  display: block;
}

.error {
  color: red;
}
</style>

<body onLoad="initDraw();">

<script src="/data.json"></script>
<h1>Mirth Graph</h1>

<svg width=800 height=1600>
  <g/>
</svg>

<script>
// Input related code goes here



var oldInputGraphValue;

var graphRE = /[?&]graph=([^&]+)/;
var graphMatch = window.location.search.match(graphRE);
if (graphMatch) {
  inputGraph.value = decodeURIComponent(graphMatch[1]);
}
var debugAlignmentRE = /[?&]alignment=([^&]+)/;
var debugAlignmentMatch = window.location.search.match(debugAlignmentRE);
var debugAlignment;
if (debugAlignmentMatch) debugAlignment = debugAlignmentMatch[1];

// Set up zoom support
var svg = d3.select("svg"),
    inner = d3.select("svg g"),
    zoom = d3.behavior.zoom().on("zoom", function() {
      inner.attr("transform", "translate(" + d3.event.translate + ")" +
                                  "scale(" + d3.event.scale + ")");
    });
svg.call(zoom);

// Create and configure the renderer
var render = dagreD3.render();



function doDraw(graphValue) {
  var g;
  if (oldInputGraphValue !== graphValue) {
    oldInputGraphValue = graphValue;
      g = graphlibDot.read(graphValue);
 
    // Save link to new graph
    //graphLink.attr("href", graphToURL());

    // Set margins, if not present
    if (!g.graph().hasOwnProperty("marginx") &&
        !g.graph().hasOwnProperty("marginy")) {
      g.graph().marginx = 10;
      g.graph().marginy = 10;
    }

    g.graph().transition = function(selection) {
      return selection.transition().duration(500);
    };

    // Render the graph into svg g
    d3.select("svg g").call(render, g);
  }
}

function initDraw() {
	//doDraw('digraph{ A->B->C; A->C; A [label="A label"]; C [label="C label"]; D[label="D label"]; C->D; D->A; D->B}' );
	var dg = ""
	for( var i=0; i < graphdata.nodes.length; i++){
		dg = dg + '"' + graphdata.nodes[i].id + '" [label="'+ graphdata.nodes[i].label + '"];'
	}
	for( var i=0; i < graphdata.edges.length; i++){
		dg = dg + '"' + graphdata.edges[i].source +'"->"' + graphdata.edges[i].target + '";'
	}
	dg = 'digraph{ '+ dg + '}';
	doDraw(dg);
}

</script>
